Download location of libraries to c:\tmp 


Lab15 - Create new directory - Demo6      
            Check / Search database driver on https://pkg.go.dev/
            Write Lab1.go
                  package main
                  import (
                  	"database/sql"
                  	_ "github.com/lib/pq"
                  	"log"
                  )
                  
                  func main(){
                  	connStr := "user=pqgotest dbname=pqgotest sslmode=verify-full"
                  	db, err := sql.Open("postgres", connStr)
                  	if err != nil {
                  		log.Fatal(err)
                  	}
                  
                  	age := 21
                  	rows, err := db.Query("SELECT name FROM users WHERE age = $1", age)
                  }
      Modify library name and connection string according your database
      go mod init ..
      go mod tidy

Lab14 - Demo5/Lab5
      package main
      import (
      	"fmt"
      	"time"
      	"sync"
      )
      var total = 0
      func main(){
      	var mux sync.Mutex
      	go deposit(&mux)
      	go widraw(&mux)
      	time.Sleep(3500 * time.Millisecond)
      	fmt.Println("Final Total = " , total)
      }
      func deposit(mux *sync.Mutex){
      	for i:=0; i< 100;i++{
      		mux.Lock()
      		bal:= total
      		bal++
      		time.Sleep(10 * time.Millisecond)
      		total = bal
      		mux.Unlock()
      	}
      	fmt.Println("Done Deposit ", total)
      }
      func widraw(mux *sync.Mutex){
      	for i:=0; i< 100;i++{
      		mux.Lock()
      		bal:= total
      		bal--
      		time.Sleep(10 * time.Millisecond)
      		total = bal
      		mux.Unlock()
      	}
      	fmt.Println("Done Widraw ", total)
      }
     
Lab13 - Demo5/Lab4
      Create a function read -> from channel
      create a function write  -> to channel
      main method to start 
            read and write and print the data received
            1. Have two reads-> check deadlock
            2. Have two writes -> check deadlock
            3. Have 3 reads/writes
       package main
             
            import "fmt"
            import "strconv" 
            func main() {
            	ch := make(chan string)
            	go read(ch)
            	go write("Blr", ch)
             	//fmt.Println("waiting for some data from channel")
            	for {}
            }
            func read(ch chan string) {
            	fmt.Println("Reading data from channel")
            	for msg := range ch	{
            	fmt.Println("Data from channel ", msg)
            	}
            	fmt.Println("Reading Done !!")
            }
             
            func write(str string, ch chan string) {
            	for i:=1; i<= 3;i++{
            		fmt.Println("Writing data to channel" , i )
            		ch <- str + strconv.Itoa(i) + " done !! "
            	}
            }
Lab12 - Demo5/Lab3
      package main
      
      import "fmt"
      
      func main(){
      	ch := make(chan string)
      	go helper("Pnq", ch)
      	go helper("Blr", ch)
      	go helper("Hyd", ch)
      	fmt.Println("waiting for some data from channel")
      	v:= <-ch
      	fmt.Println("got data from channel ", v)
      	v= <-ch
      	fmt.Println("got data from channel ", v)
      	v= <-ch
      	fmt.Println("got data from channel ", v)
      
      }
      func helper(str string, ch chan string){
      	for i:=1; i< 60;i++{
      		fmt.Print(str , i , " ")
      	}
      	ch <- str + " done !! "
      }

Lab11 - Demo5/Lab2 
      -> modify current code to stop go routines when any one go routine gets over
      package main
      
      import (
      	"fmt"
      	"time"
      )
      
      func main() {
      	go helper("-")
      	go helper("*")
      	go helper("x")
      	fmt.Println("main closing")
      	time.Sleep(100 * time.Millisecond)
      	/// stopping main from closing
      	/*
      		1. Sleep
      		2. Ask for some input
      		3. for {}
      	*/
      }
      func helper(str string) {
      	for i := 1; i < 1000; i++ {
      		fmt.Print(str, " ")
      	}
      }


Lab10 - Demo5/Lab1 - go routines
        package main
        import "fmt"
        func main(){
        	go helper("hello")
        	go helper("world")
        	fmt.Println("main closing")
        	for{}
        	/// stopping main from closing
        	/*
        		1. Sleep
        		2. Ask for some input
        		3. for {}
        	*/
        }
        func helper(str string){
        	for i:=1; i< 100;i++{
        		fmt.Print(str , i , " ")
        	}
        }
Lab 9 - modify Lab3.go to create logs(https://pkg.go.dev/log)
                Write log in a file (demo.log)
Lab8 - Lab3.go
        package main
        import (
        	"fmt"
        	"github.com/magiconair/properties"
        )
        
        func main() {
        	// init from a file
        	p := properties.MustLoadFile("my.properties", properties.UTF8)
        	host := p.MustGetString("host")
        	port := p.GetInt("port", 8080)
        	fmt.Println(host , " ,  ", port)
        }
        Create my.properties in same folder
                host=localhost
                port=8080
        cmd>go run lab3.go 
                module/non availability
        cmd>go mod init mydemo3
                observe go.mod file
        cmd>go mod tidy
                observe go.sum file (also see changes go.mod)
        run lab3
Lab7 - lab.go 
        Copy Lab1.go and use json deserialization to show email address of user
Lab6 - json  - Lab2.go
        package main
        import (
        	"fmt"
        	"encoding/json"
        ) 
         
        type Emp struct {
        	Empno  int    `json:"empnumber"`
        	Ename  string `json:"empname"`
        	Salary int    `json:"empsalary"`
        }
        func main(){
        	//func Marshal(v any) ([]byte, error)
        	emp := Emp{1, "One",111}
        	bytes, err := json.Marshal(emp)
        	fmt.Println(string(bytes) , " , " , err)
        	emp1 := Emp{}
        	err = json.Unmarshal(bytes, &emp1) 
        	fmt.Println(emp1)
        
        	fmt.Println(err)
        }
Lab5 - Demo4/Lab1 - http get
        package main
        
        import (
        	"fmt"
        	"net/http"
        	"io"
        )
        
        func main() {
        	resp, err := http.Get("https://reqres.in/api/users/1")
        	fmt.Println("Response = ", resp, " Error = ", err)
        	if err != nil {
        		fmt.Println("Error - ", err)
        		return
        	}
        	defer resp.Body.Close()
        	fmt.Println("Status = " , resp.Status)
        	fmt.Println("Body = " , resp.Body)
        	
        	body, err := io.ReadAll(resp.Body)
        	if err != nil {
        		fmt.Println("Readall Error - ", err)
        		return
        	}
        	fmt.Println("Body ", string(body))
        }


Lab4 - create interface -> Display with method Print 
        Using Emp (empno, ename, salary)-> implement Print method
        Create object and invoke method usign interface variable
        
Lab3 - Lab3.go 
        package main
        import "fmt"
        
        type Connection interface{
        	open()
        	close()
        }
        
        type OracleConnection struct{
        }
        
        func (c OracleConnection) open(){
        	fmt.Println("Open implemented ")
        }
        func (c OracleConnection) close(){
        	fmt.Println("Close implemented ")
        }
        
        func main() {
        	var con Connection
        	oracon := OracleConnection{}
        	fmt.Println("Con and OracCon created", con , oracon )
        	con = oracon
        	con.open()
        	con.close()
        	
        }

Lab2 - Append / Make for slice 
    package main
    import "fmt"
    func main() {
    	a := make([]int, 0) 
    	fmt.Println(a , " len = " , len(a), ", cap = " , cap(a)) 
    	a = append(a, 6) 
    	
    	fmt.Println(a , " len = " , len(a), ", cap = " , cap(a)) 
    	a = append(a, 6) 
    	
    	fmt.Println(a , " len = " , len(a), ", cap = " , cap(a)) 
    	
    	a = append(a, 6) 
    	a = append(a, 7) 
    	a = append(a, 8)
    	a = append(a, 9)
    	a = append(a, 1)
    	fmt.Println(a , " len = " , len(a), ", cap = " , cap(a)) 
    	a = append(a, 1) 
    	fmt.Println(a , " len = " , len(a), ", cap = " , cap(a)) 
    }

Lab1 - Demo3/Lab1, Slice from array
  package main
  import "fmt"
  func main() {
  	primes := [6]int{2, 3, 5, 7, 11, 13}
  	fmt.Println("Length = " , len(primes), "Capacity = " , cap(primes))
  
  	sl1 := primes[0:2]
  	fmt.Println(sl1)
  	fmt.Println("Length = " , len(sl1), "Capacity = " , cap(sl1))
  	sl1[0] = 100
  	fmt.Println(sl1)
  	fmt.Println(primes)
  
  	sl2:= primes[1:3]
  	fmt.Println(sl2)
  	fmt.Println("Length = " , len(sl2), "Capacity = " , cap(sl2))
  	
  }
