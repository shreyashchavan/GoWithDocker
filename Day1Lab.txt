Lab9 - Demo2/Lab2  -> panic and recover
        package main
        import "fmt"
        func main() {
                defer myrecovery()
                process()
                fmt.Println("Last line of main method")
        }
        func myrecovery(){
                r:= recover()
                fmt.Println("Recover = " , r)
        }
        
        func process(){
                for i:=0;i<5;i++{
                        fmt.Println("Process - ", i)
                        if i == 3 {
                                panic("Some Problem...")
                        }
                }
        }

Lab8 - Demo2/Lab1 -> defer (evaluation / multiple defers)
        package main
        import "fmt"
        func main() {
        	i := 0
        	defer fmt.Println("Hello " , i)   // evaluation happens here
        	fmt.Println("World ")
        	help1()
        	help2()
        }
        
        func help1(){
        	defer fmt.Println("defer of help1 ")
        	fmt.Println("help1 - 1")
        	fmt.Println("help1 - 2")
        }
        func help2(){
        	for i:=0;i<5;i++{
        		defer fmt.Println("help2 - ", i)
        	}
        }

        

Lab7 - 
        1. https://go.dev/tour/flowcontrol/1 (for, if)
        2. https://pkg.go.dev/fmt#Scan
        3. check docs for os 
        Accept a number from user and print Fibonacci series till that number
       Accept 5 strings from user and sort and print the same

Lab6 - lab6 ( 2 different files for same package)
                try compiling single file
                go run Lab6.go Lab6Helper.go 
                go fmt
                
        Lab6.go 
                package main
                import "fmt"
                
                func main(){
                	str1, str2 := "String1", "String2"
                	v1, v2:= swap(str1, str2)
                	fmt.Println("V1 = ", v1, " , V2 = " , v2) 
                	a1,a2,a3,a4 := calc(1000,10)
                	fmt.Println("Calculations are ", a1 , ", ", a2, ", ",a3 , ", ",a4 )
                }
        Lab6Helper.go 
                package main

                func swap(name1, name2 string) (string, string) {
                	return name2, name1
                }
                func calc (no1 int, no2 int) (sum, sub, mult, div int) {
                	sum, sub, mult, div =  no1+no2, no1-no2, no1*no2, no1/no2
                	return
                }
Lab5 - Lab5.go - check os docs(https://pkg.go.dev/os)
                 observe len function for array/string
        package main
        import (
        	"fmt"
        	"os"
        )
        /*
        import "fmt"
        import "os"
        */
        func main(){
        	fmt.Println(os.Args)
        	fmt.Println("Length = " , len(os.Args))
        	fmt.Println("Length of second argument = " , len(os.Args[1]))
        	
        }
Lab4 - accept two strings and swap them 
        package main
        import "fmt"
        
        func swap(name1, name2 string) (string, string) {
        	return name2, name1
        }
        func calc (no1 int, no2 int) (sum, sub, mult, div int) {
        	sum, sub, mult, div =  no1+no2, no1-no2, no1*no2, no1/no2
        	return
        }
        func main(){
        	str1, str2 := "String1", "String2"
        	v1, v2:= swap(str1, str2)
        	fmt.Println("V1 = ", v1, " , V2 = " , v2) 
        	a1,a2,a3,a4 := calc(1000,10)
        	fmt.Println("Calculations are ", a1 , ", ", a2, ", ",a3 , ", ",a4 )
        }

Lab3 - Lab3.go - variables, multiple returns 
        package main
        import "fmt"
        func hello(){
        	fmt.Println("hello func invoked ...")
        }
        func sqr (no1 int) int {
        	return no1*no1
        }
        
        func calc (no1 int, no2 int) (int, int) {
        	return no1+no2, no1*no2
        }
        
        func add (no1 int, no2 int) int {
        	return no1+no2
        }
        func mult (no1 int, no2 int) int {
        	return no1*no2
        }
        func main(){
        	var no1 = 100
        	no2 := 200
        	fmt.Println("Sum = " , no1+no2)
        	hello()
        	ans := sqr(20)
        	fmt.Println("SQR of 20 is ", ans)
        	fmt.Println("Sum of 10, 1000 is " , add(10, 1000))
        	fmt.Println("Multiplication of 10, 1000 is " , mult(10, 1000))
        	s, m := calc(10,20)
        	fmt.Println(" Sum = " , s , " Multiplication = " , m)
        
        }
Lab2 - Lab2.go -> variable declaration on single line, no new variable for :=
        package main
        import "fmt"
        
        func main(){
        	//var name = "Vaishali"
        	//name := "Vaishali"
        	//sal := 100
        	name , sal :=  "Vaishali", 100
        	fmt.Println("My Name is ", name , " and Salary is " , sal)
        	fmt.Printf("My Name is %s and Salary is %d ", name, sal)
        
        	//name := "Inder"
        	//sal := 200
        	name , salary :=  "Inder", 200
        	fmt.Println("\nMy Name is ", name , " and Salary is " , salary)
        	fmt.Printf("My Name is %s and Salary is %d ", name, salary)
        
        
        }

Lab1 - create a folder c:\...\Day1
        create a file Lab1.go in day1
            package main
            import "fmt"
            func main() {
              fmt.Println("Hello World !!")
            }
     cmd>go run Lab1.go
     Modify and watch error
      modify package name to demo
      modify method main to demo
      { on next line
      comment fmt to see unused import error
    cmd>go build Lab1.go 
                (check dir to see Lab1.exe on windows os)
   cmd>set GOOS=linux
   cmd>go build Lab1.go 
                (check dir to see Lab1.exe on windows os)

