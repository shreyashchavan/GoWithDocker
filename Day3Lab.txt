Lab2 - 
// CRUD operation on Emp
	package main 
	 
	import (
		"fmt"
		"strconv"
	)
	 
	type Emp struct {
	    Empno   int
	    Empname string
	    Salary  int64
	}
	
	func (emp *Emp) incrementSalary(percent int) {
	    emp.Salary += ((emp.Salary * int64(percent)) / 100)
	}
	func (emp Emp) print() {
	    fmt.Printf("\nEmpno: %d \tName : %s, \tSalary : %d",emp.Empno, emp.Empname, emp.Salary)
	}
	type EmpMgr struct {
		emparr []Emp 
	} 
	func (empmgr *EmpMgr) add(emp Emp) {
	    fmt.Println("empmgr add with " , emp)
		empmgr.emparr = append(empmgr.emparr, emp)
	}
	func (empmgr EmpMgr) print() {
		// modify range
		for i := 0; i < len(empmgr.emparr); i++ {
			empmgr.emparr[i].print()	
		}
	 
	}
	
	func main() {
		
		// create instance of empmgr
		empmgr := EmpMgr{}
		for i := 0; i < 5; i++ {
			emp := Emp {i, "Ename"+ strconv.Itoa(i), int64(i * 100)}
			empmgr.add(emp)
			 
		}
		// print fo empmgr
			empmgr.print()
	}

Check -> google -> docker playground, start-> create vm
			docker run hello-world 
			docker ps -a 
Lab1Extension - Modify 
    func index (w http.ResponseWriter, r *http.Request) {
	    io.WriteString(w,"<h1>Hello World of Index Page!!</h1>" )
	    io.WriteString(w, "Method = "+ r.Method)
    }
    Write 4 different functions to handler get/post/put and delete requests


Lab1 - Demo7/Lab1.go
    package main
    
    import (
    	"fmt"
    	"net/http"
    )
    func main(){
    	http.HandleFunc("/bar", bar)
    	http.HandleFunc("/", index)
    	
    	http.ListenAndServe(":8080", nil)
    }
    
    func index (w http.ResponseWriter, r *http.Request) {
    	w.Write([]byte("Hello World of Index Page!!"))
    }
    
    func bar(w http.ResponseWriter, r *http.Request) {
    	fmt.Fprintln(w, "Hello,", r.URL.Path)
    }
LabRef - MicroServices
    https://martinfowler.com/articles/microservices.html
    https://medium.com/edureka/microservice-architecture-5e7f056b90f1
  
