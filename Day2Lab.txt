Lab 9 - modify Lab3.go to create logs(https://pkg.go.dev/log)
                Write log in a file (demo.log)
Lab8 - Lab3.go
        package main
        import (
        	"fmt"
        	"github.com/magiconair/properties"
        )
        
        func main() {
        	// init from a file
        	p := properties.MustLoadFile("my.properties", properties.UTF8)
        	host := p.MustGetString("host")
        	port := p.GetInt("port", 8080)
        	fmt.Println(host , " ,  ", port)
        }
        Create my.properties in same folder
                host=localhost
                port=8080
        cmd>go run lab3.go 
                module/non availability
        cmd>go mod init mydemo3
                observe go.mod file
        cmd>go mod tidy
                observe go.sum file (also see changes go.mod)
        run lab3
Lab7 - lab.go 
        Copy Lab1.go and use json deserialization to show email address of user
Lab6 - json  - Lab2.go
        package main
        import (
        	"fmt"
        	"encoding/json"
        ) 
         
        type Emp struct {
        	Empno  int    `json:"empnumber"`
        	Ename  string `json:"empname"`
        	Salary int    `json:"empsalary"`
        }
        func main(){
        	//func Marshal(v any) ([]byte, error)
        	emp := Emp{1, "One",111}
        	bytes, err := json.Marshal(emp)
        	fmt.Println(string(bytes) , " , " , err)
        	emp1 := Emp{}
        	err = json.Unmarshal(bytes, &emp1) 
        	fmt.Println(emp1)
        
        	fmt.Println(err)
        }
Lab5 - Demo4/Lab1 - http get
        package main
        
        import (
        	"fmt"
        	"net/http"
        	"io"
        )
        
        func main() {
        	resp, err := http.Get("https://reqres.in/api/users/1")
        	fmt.Println("Response = ", resp, " Error = ", err)
        	if err != nil {
        		fmt.Println("Error - ", err)
        		return
        	}
        	defer resp.Body.Close()
        	fmt.Println("Status = " , resp.Status)
        	fmt.Println("Body = " , resp.Body)
        	
        	body, err := io.ReadAll(resp.Body)
        	if err != nil {
        		fmt.Println("Readall Error - ", err)
        		return
        	}
        	fmt.Println("Body ", string(body))
        }


Lab4 - create interface -> Display with method Print 
        Using Emp (empno, ename, salary)-> implement Print method
        Create object and invoke method usign interface variable
        
Lab3 - Lab3.go 
        package main
        import "fmt"
        
        type Connection interface{
        	open()
        	close()
        }
        
        type OracleConnection struct{
        }
        
        func (c OracleConnection) open(){
        	fmt.Println("Open implemented ")
        }
        func (c OracleConnection) close(){
        	fmt.Println("Close implemented ")
        }
        
        func main() {
        	var con Connection
        	oracon := OracleConnection{}
        	fmt.Println("Con and OracCon created", con , oracon )
        	con = oracon
        	con.open()
        	con.close()
        	
        }

Lab2 - Append / Make for slice 
    package main
    import "fmt"
    func main() {
    	a := make([]int, 0) 
    	fmt.Println(a , " len = " , len(a), ", cap = " , cap(a)) 
    	a = append(a, 6) 
    	
    	fmt.Println(a , " len = " , len(a), ", cap = " , cap(a)) 
    	a = append(a, 6) 
    	
    	fmt.Println(a , " len = " , len(a), ", cap = " , cap(a)) 
    	
    	a = append(a, 6) 
    	a = append(a, 7) 
    	a = append(a, 8)
    	a = append(a, 9)
    	a = append(a, 1)
    	fmt.Println(a , " len = " , len(a), ", cap = " , cap(a)) 
    	a = append(a, 1) 
    	fmt.Println(a , " len = " , len(a), ", cap = " , cap(a)) 
    }

Lab1 - Demo3/Lab1, Slice from array
  package main
  import "fmt"
  func main() {
  	primes := [6]int{2, 3, 5, 7, 11, 13}
  	fmt.Println("Length = " , len(primes), "Capacity = " , cap(primes))
  
  	sl1 := primes[0:2]
  	fmt.Println(sl1)
  	fmt.Println("Length = " , len(sl1), "Capacity = " , cap(sl1))
  	sl1[0] = 100
  	fmt.Println(sl1)
  	fmt.Println(primes)
  
  	sl2:= primes[1:3]
  	fmt.Println(sl2)
  	fmt.Println("Length = " , len(sl2), "Capacity = " , cap(sl2))
  	
  }
