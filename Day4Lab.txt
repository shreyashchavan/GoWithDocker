Lab4 - accept s3 bucketname as argument and create the bucket.
      s3create.go
Lab3 - AWS setup for go
      create folder awsdemo\s3demo
      create a file s3list.go
            package main

            import (
            	"fmt"
            
            	"github.com/aws/aws-sdk-go/aws"
            	"github.com/aws/aws-sdk-go/aws/awserr"
            	"github.com/aws/aws-sdk-go/aws/session"
            	"github.com/aws/aws-sdk-go/service/s3"
            )
            
            func main() {
            	// Create a Session with a custom region
            	sess, err := session.NewSession(&aws.Config{
            		Region: aws.String("us-east-1"),
            	})
            	fmt.Println("For new session ", err)
            	svc := s3.New(sess)
            
            	input := &s3.ListBucketsInput{}
            
            	result, err := svc.ListBuckets(input)
            	if err != nil {
            		if aerr, ok := err.(awserr.Error); ok {
            			switch aerr.Code() {
            			default:
            				fmt.Println(aerr.Error())
            			}
            		} else {
            			// Print the error, cast err to awserr.Error to get the Code and
            			// Message from an error.
            			fmt.Println(err.Error())
            		}
            		return
            	}
            
            	fmt.Println(result)
            }
            create module, tidy, run 

Lab2 - AWS Setup
      Create a user in aws (iam), with s3fullaccess, generate security credentials, download csv
      cmd>aws configure
            give details of id, secret, region, no input for format 
      else if you dont have aws cli installed
            create two files in folder c:\users\{username}\.aws 
            credentials
                  [default]
                  aws_access_key_id = ...
                  aws_secret_access_key = ...
            config
                  [default]
                  region = us-east-1
      cmd> aws s3 ls 
            empty/no error 

Lab1- Docker playground
      $>mkdir test
      $> cd test 
      $>echo " " > dockerfile
      $>echo " " > web.go
     click on editor to modify files
    web.go   
          package main
          import (
          	"fmt"
          	"net/http"
          	"io"
          )
          func main(){
          	http.HandleFunc("/bar", bar)
          	http.HandleFunc("/", index)
          	fmt.Println("Starting Server on 8080...")
          	http.ListenAndServe(":8080", nil)
          	
          }
          
          func index (w http.ResponseWriter, r *http.Request) {
          	io.WriteString(w,"<h1>Hello World of Index Page!!</h1>" )
          	io.WriteString(w, "Method = "+ r.Method)
          
          }
   dockerfile
    FROM golang
    COPY web.go .
    RUN go build ./web.go
    EXPOSE 8080
    CMD ./web
  $>docker build -t webgos .
  $>docker run -P -d webgos
  $>docker run -P -d webgos
    click on the ports on url  if not
            docker ps 
            click on open port (give port number shown for that container)



          func bar(w http.ResponseWriter, r *http.Request) {
          	fmt.Fprintln(w, "Hello,", r.URL.Path)
          }
          

  
