Lab5 - Exact code WebAppDemo
		create module and library 
		Modify post method to get json string and add it to EmpMgr

Lab4 - https://go.dev/doc/tutorial/create-module
	Create a folder libraryDemo
	Create a folder libraryDemo\mylib
	Create a folder libraryDemo\uselib
	create a file calc1.go in mylib
		package calc
		func Sqr(no1 int) int {
			return no1 * no1
		}
	create a file calc2.go in mylib
		package calc
		func Add(no1 int, no2 int) int {
			return no1 + no2
		}
		func Div(no1 int, no2 int) int {
			return no1 / no2
		}
	cmd\librarydemo>go mod init mylibdemo
	cmd\librarydemo>go mod tidy

	create a file Lab1.go in uselib
		package main
		import (
			"fmt"
			"abc.com/mylibdemo"
		)
		func main(){
			s := calc.Sqr(10)
			fmt.Println("Sqr of 10 is ", s)
			s = calc.Add(10,1000)
			fmt.Println("Add = ", s)
			s = calc.Div(10,2)
			fmt.Println("Div is ", s)
		}
	cmd\uselib>go mod edit -replace abc.com/mylibdemo=../mylib
	cmd\uselib>go mod tidy
	cmd\uselib>go run Lab1.go

Lab3 - Demo8/Lab1
	package main
	import "fmt"
	
	func sqr (no1 int) int {
		// http get
		return no1*no1
	}
	func add (no1 int, no2 int) int {
		return no1+no2
	}
	func div (no1 int, no2 int) int {
		return no1/no2
	}
	func main(){
		ans := sqr(20)
		fmt.Println("SQR of 20 is ", ans)
		fmt.Println("Sum of 10, 1000 is " , add(10, 1000))
		fmt.Println("Division of 100, 10 is " , div(100, 10))
	}
	Lab1_test.go
		package main
		import "testing"
		
		func TestSqr(t *testing.T) {
			got := sqr(10)
			if got != 100 {
				t.Errorf("Sqr(10) = %d; want 100", got)
			}
		}
		
		func TestAdd(*testing.T) {
		
		}
		func TestDiv1(t *testing.T) {
			got := div(10, 5)
			if got != 2 {
				t.Errorf("div(10,5) = %d; want 2", got)
			}
		}
		func TestDiv2(t *testing.T) {
			defer func() {
				if r := recover(); r == nil {
					t.Errorf("Div of 10,0 should raise panic")
				}
			}()
			div(10, 0)
		}
		
		func BenchmarkSqr(b *testing.B) {
			for i := 0; i < b.N; i++ {
				sqr(i)
			}
		}
	cmd>go test .  // will give error, create mod file
	cmd>go test . -v 
	cmd>go test . -v -cover 
	cmd>go test . -v -cover -coverprofile simplecover.out
	cmd>go tool cover -html=simplecover.out -o htmlout.htmlâ”‚
	cmd>go test . -v -bench . 

Lab2 - 
// CRUD operation on Emp
	package main 
	 
	import (
		"fmt"
		"strconv"
	)
	 
	type Emp struct {
	    Empno   int
	    Empname string
	    Salary  int64
	}
	
	func (emp *Emp) incrementSalary(percent int) {
	    emp.Salary += ((emp.Salary * int64(percent)) / 100)
	}
	func (emp Emp) print() {
	    fmt.Printf("\nEmpno: %d \tName : %s, \tSalary : %d",emp.Empno, emp.Empname, emp.Salary)
	}
	type EmpMgr struct {
		emparr []Emp 
	} 
	func (empmgr *EmpMgr) add(emp Emp) {
	    fmt.Println("empmgr add with " , emp)
		empmgr.emparr = append(empmgr.emparr, emp)
	}
	func (empmgr EmpMgr) print() {
		// modify range
		for i := 0; i < len(empmgr.emparr); i++ {
			empmgr.emparr[i].print()	
		}
	 
	}
	
	func main() {
		
		// create instance of empmgr
		empmgr := EmpMgr{}
		for i := 0; i < 5; i++ {
			emp := Emp {i, "Ename"+ strconv.Itoa(i), int64(i * 100)}
			empmgr.add(emp)
			 
		}
		// print fo empmgr
			empmgr.print()
	}

Check -> google -> docker playground, start-> create vm
			docker run hello-world 
			docker ps -a 
Lab1Extension - Modify 
    func index (w http.ResponseWriter, r *http.Request) {
	    io.WriteString(w,"<h1>Hello World of Index Page!!</h1>" )
	    io.WriteString(w, "Method = "+ r.Method)
    }
    Write 4 different functions to handler get/post/put and delete requests


Lab1 - Demo7/Lab1.go
    package main
    
    import (
    	"fmt"
    	"net/http"
    )
    func main(){
    	http.HandleFunc("/bar", bar)
    	http.HandleFunc("/", index)
    	
    	http.ListenAndServe(":8080", nil)
    }
    
    func index (w http.ResponseWriter, r *http.Request) {
    	w.Write([]byte("Hello World of Index Page!!"))
    }
    
    func bar(w http.ResponseWriter, r *http.Request) {
    	fmt.Fprintln(w, "Hello,", r.URL.Path)
    }
LabRef - MicroServices
    https://martinfowler.com/articles/microservices.html
    https://medium.com/edureka/microservice-architecture-5e7f056b90f1
  
